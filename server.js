import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { playerJsonToMetaData } from './utils.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const PROJECT_ROOT = __dirname; // server.js sits at project root

const app = express();
const PORT = process.env.PORT || 3000;
// No generic data file anymore; we only serve player_{id}.json

// Removed legacy seeded rows and /api/data endpoints

app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

// Serve player_{id}.json files generated by fetch-data.mjs
app.get('/api/player/:id', (req, res) => {
  const id = String(req.params.id || '').trim();
  if (!/^\d+$/.test(id)) return res.status(400).json({ error: 'invalid id' });
  const filePath = path.join(PROJECT_ROOT, `player_${id}.json`);
  if (!fs.existsSync(filePath)) return res.status(404).json({ error: 'player not found' });
  try {
    const raw = fs.readFileSync(filePath, 'utf-8');
    const json = JSON.parse(raw);
    // Only pass through the parts we care about on the frontend
    const { fixtures = [], history = [] } = json || {};
    res.json({ id: Number(id), fixtures, history });
  } catch (err) {
    console.error('Failed to read player json', err);
    res.status(500).json({ error: 'failed to read player file' });
  }
});

// Serve simplified history from player_simple.json (currently only for id=1)
app.get('/api/player-simple/:id', (req, res) => {
  const id = String(req.params.id || '').trim();
  if (!/^\d+$/.test(id)) return res.status(400).json({ error: 'invalid id' });
  const filePath = path.join(PROJECT_ROOT, `player_${id}_simple.json`);
  if (!fs.existsSync(filePath)) return res.status(404).json({ error: 'player simple not found' });
  try {
    const raw = fs.readFileSync(filePath, 'utf-8');
    const json = JSON.parse(raw);
    const { history = [] } = json || {};
    res.json({ id: Number(id), history });
  } catch (err) {
    console.error('Failed to read simple player json', err);
    res.status(500).json({ error: 'failed to read simple player file' });
  }
});

// Player metadata
app.get('/api/player-meta/:id', (req, res) => {
  const id = String(req.params.id || '').trim();
  if (!/^\d+$/.test(id)) return res.status(400).json({ error: 'invalid id' });
  const filePath = path.join(PROJECT_ROOT, `player_${id}.json`);
  if (!fs.existsSync(filePath)) return res.status(404).json({ error: 'player not found' });
  try {
    const meta = playerJsonToMetaData(filePath);
    const firstName = meta?.player?.first_name || '';
    const secondName = meta?.player?.second_name || '';
    const teamName = meta?.team?.name || '';
    res.json({ id: Number(id), first_name: firstName, second_name: secondName, team_name: teamName });
  } catch (err) {
    console.error('Failed to build player metadata', err);
    res.status(500).json({ error: 'failed to build metadata' });
  }
});

// Removed legacy /api/data endpoints

app.use(express.static(path.join(__dirname, 'public')));
app.get('*', (req, res) => { res.sendFile(path.join(__dirname, 'public', 'index.html')); });

app.listen(PORT, () => { console.log(`Server listening on http://localhost:${PORT}`); });
